import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 公众号：干货食堂
 */
public class Test {

    public static void main(String[] args) {
        List<User> userList = init();
        //1、第一种 字段->字段 ，这种需要保证 key不能重复，不然会报错
//        Map<String, String> map = userList.stream().collect(Collectors.toMap(User::getName, User::getDepartment));
//        Map<String, User> map = userList.stream().collect(Collectors.toMap(User::getName, Function.identity()));

        //2、第二种 处理key相同的情况
//        Map<String, String> map = userList.stream().collect(Collectors.toMap(User::getName, e -> e.getDepartment(),(n1, n2) -> n1 +"/"+ n2));

        //3、第三种 用于自定义返回 Map 类型，比如我们希望返回的 Map 是根据 Key 排序的
//        Map<String, String> map = userList.stream().collect(Collectors.toMap(User::getName, e -> e.getDepartment(),(n1, n2) -> n1, TreeMap::new));

        //4、第四种 val是集合的情况，根据很麻烦，没有group by 方便
        Map<String, List<String>> map = userList.stream().collect(Collectors.toMap(User::getName, e -> new ArrayList<String>() {{
            add(e.getDepartment());
        }}, (n1, n2) -> {
            n1.addAll(n2);
            return n1;
        }));

        //遍历
        for (Map.Entry<String, List<String>> entry : map.entrySet()) {
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
        }
    }

    /**
     * 初始化数据
     */
    public static List<User> init() {
        List<User> userList = new ArrayList<User>();
        userList.add(new User(1, "干货食堂_01", "男", 32, "Y研发部", BigDecimal.valueOf(1600)));
        userList.add(new User(2, "干货食堂_02", "男", 30, "C财务部", BigDecimal.valueOf(1800)));
        userList.add(new User(3, "干货食堂_03", "女", 20, "R人事部", BigDecimal.valueOf(1700)));
        userList.add(new User(4, "干货食堂_04", "男", 38, "Y研发部", BigDecimal.valueOf(1500)));
        userList.add(new User(5, "干货食堂_05", "女", 25, "C财务部", BigDecimal.valueOf(1200)));
        userList.add(new User(5, "干货食堂_05", "女", 25, "R人事部", BigDecimal.valueOf(1200)));
        return userList;
    }


    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class User {
        int id;
        String name;
        String sex;
        int age;
        String Department;
        BigDecimal Salary;

    }
}
