package com.example.bootdemo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.TreeMap;
import java.util.stream.Collectors;
/**
 * 公众号：干货食堂
 */
public class Test {
    public static void main(String[] args) {
        List<User> userList = init();

        /**
         * TreeMap是有序的，如果key是数值类型，默认升序，如果key为string或者对象，需要自己实现比较器
         */
        TreeMap<String, List<User>> matchsListMap = userList.stream()
                .collect(Collectors.groupingBy(User::getName, TreeMap::new,Collectors.toList()));

        /**
         * 自定义排序  注意是key的排序
         */
        TreeMap<String, List<User>> matchsListMap1 = userList.stream()
                .collect(Collectors.groupingBy(User::getName, () -> new TreeMap(new Comparator<String>() {
                    @Override
                    public int compare(String o1, String o2) {
                        return o2.compareTo(o1);
                    }
                }),Collectors.toList()));

        /**
         * LinkedHashMap , LinkedHashMap实现了有序的HashMap，LinkedHashMap取键值对时，是按照你放入的顺序来取的
         */
        LinkedHashMap<String, List<User>> matchsListMap2 = userList.stream()
                .collect(Collectors.groupingBy(User::getName, LinkedHashMap::new,Collectors.toList()));

        System.out.println(matchsListMap);
    }

    /**
     * 初始化数据
     */
    public static List<User> init() {
        List<User> userList = new ArrayList<User>();
        userList.add(new User(2, "干货食堂_02", "男", 30, "财务部", BigDecimal.valueOf(1800)));
        userList.add(new User(1, "干货食堂_01", "男", 32, "研发部", BigDecimal.valueOf(1600)));
        userList.add(new User(3, "干货食堂_03", "女", 20, "人事部", BigDecimal.valueOf(1700)));
        userList.add(new User(4, "干货食堂_04", "男", 38, "研发部", BigDecimal.valueOf(1500)));
        userList.add(new User(5, "干货食堂_05", "女", 25, "财务部", BigDecimal.valueOf(1200)));
        return userList;
    }


    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class User {
        int id;
        String name;
        String sex;
        int age;
        String Department;
        BigDecimal Salary;

    }
}